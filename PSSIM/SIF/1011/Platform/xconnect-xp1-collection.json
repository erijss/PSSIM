{
    "Parameters": {
        "AppPackage": {
            "Type": "string",
            "Description": "The path to the Web Deploy package to deploy.",
            "DefaultValue": ""
        },
        "AppsLicenseFile": {
            "Type": "string",
            "Description": "The path to the Sitecore license file.",
            "DefaultValue": ".\\License.xml"
        },
        "AppName": {
            "Type": "string",
            "DefaultValue": "",
            "Description": "The name of the site to be deployed."
        },
        "AppsRootFolder": {
            "Type": "String",
            "Description": "Root folder to install the site to. If left on the default [systemdrive]:\\inetpub\\wwwroot will be used.",
            "DefaultValue": ""
        },
        "AppCertificate": {
            "Type": "string",
            "Description": "The certificate to use for HTTPS web bindings. Provide the name or the thumbprint. If not provided a certificate will be generated.",
            "DefaultValue": ""
        },
        "XConnectCertificate": {
            "Type": "string",
            "Description": "The certificate to use for encryption. Provide the name or the thumbprint.",
            "DefaultValue": ""
        },
        "SqlServerDatabasePrefix": {
            "Type": "string",
            "Description": "The prefix used for all Sql databases.",
            "DefaultValue": ""
        },
        "SqlServerAdminUser": {
            "Type": "string",
            "DefaultValue": "sa",
            "Description": "The Sql admin user account to use when installing databases."
        },
        "SqlServerAdminPassword": {
            "Type": "string",
            "DefaultValue": "",
            "Description": "The Sql admin password to use when installing databases."
        },
        "DatabaseCollectionUser": {
            "Type": "string",
            "DefaultValue": "collectionuser",
            "Description": "The Sql admin user account to use when installing databases."
        },
        "DatabaseCollectionPassword": {
            "Type": "string",
            "DefaultValue": "SIF-Default",
            "Description": "The Sql admin password to use when installing databases."
        },
        "DatabaseReferenceDataUser": {
            "Type": "string",
            "DefaultValue": "referencedatauser",
            "Description": "The Sql user for the Reference Data connection string in Sitecore."
        },
        "DatabaseReferenceDataPassword": {
            "Type": "string",
            "DefaultValue": "SIF-Default",
            "Description": "The Sql password for the Reference Data connection string in Sitecore."
        },
        "DatabaseProcessingPoolsUser": {
            "Type": "string",
            "DefaultValue": "poolsuser",
            "Description": "The Sql user for the Processing Pools connection string in Sitecore."
        },
        "DatabaseProcessingPoolsPassword": {
            "Type": "string",
            "DefaultValue": "SIF-Default",
            "Description": "The Sql password for the Processing Pools connection string in Sitecore."
        },
        "DatabaseMarketingAutomationUser": {
            "Type": "string",
            "DefaultValue": "marketingautomationuser",
            "Description": "The Sql user for the Marketing Automation connection string in Sitecore."
        },
        "DatabaseMarketingAutomationPassword": {
            "Type": "string",
            "DefaultValue": "SIF-Default",
            "Description": "The Sql password for the Marketing Automation connection string in Sitecore."
        },
        "DatabaseMessagingUser": {
            "Type": "string",
            "DefaultValue": "messaginguser",
            "Description": "The Sql user for the Messaging connection string in Sitecore."
        },
        "DatabaseMessagingPassword": {
            "Type": "string",
            "DefaultValue": "SIF-Default",
            "Description": "The Sql password for the Messaging connection string in Sitecore."
        },
        "SqlServerInstance": {
            "Type": "string",
            "DefaultValue": "",
            "Description": "The Sql Server where databases will be installed."
        },
        "AppEnvironment": {
            "Type": "string",
            "DefaultValue": "Development",
            "Description": "The configuration environment for this instance."
        },
        "AppLogLevel": {
            "Type": "string",
            "DefaultValue": "Information",
            "Description": "The level of log information to output."
        },
        "AppHostMappingName": {
            "Type": "string",
            "Reference": "AppName",
            "Description": "The host mapping name of the app."
        },
        "AppDnsName": {
            "Type": "string",
            "Reference": "AppName",
            "Description": "The dns name of the app."
        },
        "AppSkipDatabaseInstallation": {
            "Type": "bool",
            "DefaultValue": false,
            "Description": "Skip database installation."
        },
        "PackagesTempLocation": {
            "Type": "String",
            "Description": "Alternative location to save WDP packages. If left on the default $Env:Temp will be used.",
            "DefaultValue": "",
            "Validate": "[TestPath(variable('Package.Download.Location'))]"
        },
        "PackagesDownloadLocations": {
            "Type": "String",
            "Description": "File with URI and SHA256 hashes of dynamically downloadable WDPs.",
            "DefaultValue": ".\\downloads.json"
        },
        "Update": {
            "Type": "bool",
            "Description": "The parameter for the installing delta WDP packages.",
            "DefaultValue": false
        }
    },
    "Variables": {
        "Sql.Server.Password.Secure": "[ConvertToSecureString(String:parameter('SqlServerAdminPassword'),AsPlainText:true,Force:true)]",
        "Sql.Server.Credential": "[NewPSCredential(Username:parameter('SqlServerAdminUser'),Password:variable('Sql.Server.Password.Secure'))]",

        "Skip.dbDacFx": "[if(variable('Skip.Install.Databases'),'dbDacFx','null')]",
        "Skip.dbFullSql": "[if(variable('Skip.Install.Databases'),'dbFullSql','null')]",
        "Skip.Install.Databases": "[or(parameter('AppSkipDatabaseInstallation'),parameter('Update'))]",

        "Sql.Database.Sharding.Prefix": "[concat(parameter('SqlServerDatabasePrefix'), '_Xdb.Collection.Shard')]",
        "Sql.Database.ShardMapManager.Name": "[concat(variable('Sql.Database.Sharding.Prefix'), 'MapManager')]",
        "Sql.Database.Shard0.Name": "[concat(variable('Sql.Database.Sharding.Prefix'), '0')]",
        "Sql.Database.Shard1.Name": "[concat(variable('Sql.Database.Sharding.Prefix'), '1')]",
        "Sql.Database.ProcessingPools.Name": "[concat(parameter('SqlServerDatabasePrefix'), '_Processing.Pools')]",
        "Sql.Database.MarketingAutomation.Name": "[concat(parameter('SqlServerDatabasePrefix'), '_MarketingAutomation')]",
        "Sql.Database.Messaging.Name": "[concat(parameter('SqlServerDatabasePrefix'), '_Messaging')]",
        "Sql.Database.ReferenceData.Name": "[concat(parameter('SqlServerDatabasePrefix'), '_ReferenceData')]",
        "Sql.Database.MarketingAutomation.Password": "[parameter('DatabaseMarketingAutomationPassword'))]",
        "Sql.Database.Messaging.Password": "[parameter('DatabaseMessagingPassword'))]",
        "Sql.Database.ProcessingPools.Password": "[parameter('DatabaseProcessingPoolsPassword'))]",
        "Sql.Database.Collection.Password": "[parameter('DatabaseCollectionPassword'))]",
        "Sql.Database.ReferenceData.Password": "[parameter('DatabaseReferenceDataPassword')]",
        "Sql.Database.Collection.User": "[parameter('DatabaseCollectionUser'))]",

        "Sharding.Root.Path": "[joinpath(variable('App.DataFolder'), 'collectiondeployment')]",
        "Sharding.Tool.Path": "[joinpath(variable('Sharding.Root.Path'), 'Sitecore.Xdb.Collection.Database.SqlShardingDeploymentTool.exe')]",
        "Sharding.DacPac.Path": "[joinpath(variable('Sharding.Root.Path'), 'Sitecore.Xdb.Collection.Database.Sql.dacpac')]",
        "Sharding.DB.Connection": "[sqlconnectionstring(parameter('SqlServerInstance'), '', parameter('SqlServerAdminUser'), parameter('SqlServerAdminPassword'))]",
        "Sharding.Edition": "Basic",
        "Sharding.SqlCmd.Path.CreateShardApplicationDatabaseServerLogin": "[joinpath(variable('Sharding.Root.Path'), 'CreateShardApplicationDatabaseServerLogin.sql')]",
        "Sharding.SqlCmd.Path.CreateShardManagerApplicationDatabaseUser": "[joinpath(variable('Sharding.Root.Path'), 'CreateShardManagerApplicationDatabaseUser.sql')]",
        "Sharding.SqlCmd.Path.CreateShardApplicationDatabaseUser": "[joinpath(variable('Sharding.Root.Path'), 'CreateShardApplicationDatabaseUser.sql')]",

        "Certificate.Store": "Cert:\\Localmachine\\My",
        "Certificate.App.Thumbprint": "[GetCertificateThumbprint(parameter('AppCertificate'), variable('Certificate.Store'))]",
        "Certificate.XConnect.Thumbprint": "[GetCertificateThumbprint(parameter('XConnectCertificate'), variable('Certificate.Store'))]",
        "Certificate.XConnect.Path": "[joinpath(variable('Certificate.Store'), variable('Certificate.XConnect.Thumbprint'))]",

        "App.Path": "[if(variable('App.Path.Test'),variable('App.Path.Default'),variable('App.Path.Custom'))]",
        "App.Path.Default": "[joinpath(environment('SystemDrive'), 'inetpub', 'wwwroot', parameter('AppName'))]",
        "App.Path.Custom": "[joinpath(parameter('AppsRootFolder'),parameter('AppName'))]",
        "App.Path.Test": "[equal(parameter('AppsRootFolder'),'')]",
        "App.DataFolder": "[joinpath(variable('App.Path'), 'App_Data')]",

        "Services.IndexWorker.InstallPath": "[joinpath(variable('App.DataFolder'), 'jobs','continuous','IndexWorker')]",
        "Services.IndexWorker.Name": "[concat(parameter('AppName'), '-indexworker')]",

        "Packages.DownloadLocations.File": "[ReadJson(parameter('PackagesDownloadLocations'))]",
        "Packages.DownloadLocations.File.Test": "[TestPath(Path:Parameter('PackagesDownloadLocations'))]",

        "Package.Download.Identifier": "xconnect-xp1-collection.json",
        "Package.Download.Location": "[if(variable('Package.Download.Location.Test'),Environment('Temp'),parameter('PackagesTempLocation'))]",
        "Package.Download.Location.Test": "[equal(parameter('PackagesTempLocation'),'')]",
        "Package.Download.Object": "[SelectObject(InputObject:variable('Packages.DownloadLocations.File'),ExpandProperty:variable('Package.Download.Identifier'))]",
        "Package.Download.Uri": "[SelectObject(InputObject:variable('Package.Download.Object'),ExpandProperty:'Uri')]",
        "Package.Download.Hash": "[SelectObject(InputObject:variable('Package.Download.Object'),ExpandProperty:'Hash')]",
        "Package.Download.Path": "[JoinPath(variable('Package.Download.Location'),variable('Package.Download.Filename'))]",
        "Package.Download.Document": "[SplitPath(Path:variable('Package.Download.Uri'),Leaf:true)]",
        "Package.Download.Filename": "[Split(String:variable('Package.Download.Document'),Characters:'?')]",

        "App.Package": "[if(parameter('AppPackage'),parameter('AppPackage'),variable('Package.Download.Path'))]",
        "Package.Available": "[or(variable('Package.Provided'),not(variable('Packages.DownloadLocations.File.Test')))]",
        "Package.Provided": "[if(parameter('AppPackage'),parameter('AppPackage'),'')]"
    },
    "Register": {
        "Tasks": {
            "InvokeSqlcmd": "Invoke-Sqlcmd",
            "RemoveItem": "Remove-Item",
            "RemoveSQLLogin": "Remove-SQLLogin"
        },
        "ConfigFunction": {
            "ConvertToSecureString": "ConvertTo-SecureString",
            "TestPath": "Test-Path",
            "SelectObject": "Select-Object",
            "SplitPath": "Split-Path",
            "GetVariable": "Get-Variable"
        }
    },
    "Tasks": {
        "DownloadWDP": {
            "Description": "Download the WDP and verifies it against the stored hash.",
            "Type": "DownloadFile",
            "Params": {
                "SourceUri": "[variable('Package.Download.URI')]",
                "DestinationPath": "[variable('Package.Download.Path')]",
                "Hash": "[variable('Package.Download.Hash')]"
            },
            "Skip": "[variable('Package.Available')]"
        },
        "CreatePaths": {
            "Description": "Ensure the destination path for the site exists.",
            "Type": "EnsurePath",
            "Params": {
                "Exists": [
                    "[variable('App.Path')]"
                ]
            },
            "Skip": "[parameter('Update')]"
        },
        "CreateAppPool": {
            "Description": "Creates or updates the app pool.",
            "Type": "AppPool",
            "Params": {
                "Name": "[parameter('AppName')]",
                "Properties": {
                    "ProcessModel": {
                        "identityType": "ApplicationPoolIdentity"
                    }
                }
            },
            "Skip": "[parameter('Update')]"
        },
        "SetAppPoolCertStorePermissions": {
            "Description": "Set permissions for the App Pool User to access the client certificate.",
            "Type": "FilePermissions",
            "Params": {
                "Path": "[ResolveCertificatePath(variable('Certificate.XConnect.Path'))]",
                "Rights": [
                    {
                        "User": "[concat('IIS AppPool\\', parameter('AppName'))]",
                        "FileSystemRights": [
                            "Read"
                        ],
                        "InheritanceFlags": [
                            "None"
                        ]
                    }
                ]
            },
            "Skip": "[parameter('Update')]"
        },
        "CreateWebsite": {
            "Description": "Creates or updates the IIS website instance.",
            "Type": "Website",
            "Params": {
                "Name": "[parameter('AppName')]",
                "ApplicationPool": "[parameter('AppName')]",
                "PhysicalPath": "[variable('App.Path')]"
            },
            "Skip": "[parameter('Update')]"
        },
        "StopWebsite": {
            "Description": "Stops the website if it is running.",
            "Type": "ManageWebsite",
            "Params": {
                "Name": "[parameter('AppName')]",
                "Action": "Stop"
            }
        },
        "StopAppPool": {
            "Description": "Stops the app pool if it is running.",
            "Type": "ManageAppPool",
            "Params": {
                "Name": "[parameter('AppName')]",
                "Action": "Stop"
            }
        },
        "RemoveDefaultBinding": {
            "Description": "Removes the default *:80 web binding.",
            "Type": "WebBinding",
            "Params": {
                "SiteName": "[parameter('AppName')]",
                "Remove": [
                    {
                        "Port": "80",
                        "IPAddress": "*"
                    }
                ]
            },
            "Skip": "[parameter('Update')]"
        },
        "CreateBindingsWithThumbprint": {
            "Description": "Configures the site bindings for the webapp.",
            "Type": "WebBinding",
            "Params": {
                "SiteName": "[parameter('AppName')]",
                "Add": [
                    {
                        "HostHeader": "[parameter('AppDnsName')]",
                        "Protocol": "https",
                        "SSLFlags": 1,
                        "Thumbprint": "[variable('Certificate.App.Thumbprint')]"
                    }
                ]
            },
            "Skip": "[or(not(parameter('AppCertificate')),parameter('Update'))]"
        },
        "SetClientCertificatePermissions": {
            "Type": "WebsiteClientCert",
            "Params": {
                "SiteName": "[parameter('AppName')]",
                "Setting": "Accept"
            },
            "Skip": "[parameter('Update')]"
        },
        "SupportListManagerLargeUpload": {
            "Type": "IISConfiguration",
            "Params": {
                "SiteName": "[parameter('AppName')]",
                "ConfigPath": "system.webServer/serverRuntime",
                "Key": "uploadReadAheadSize",
                "Value": 491520000
            },
            "Skip": "[parameter('Update')]"
        },
        "CreateHostHeader": {
            "Description": "Sets a hostheader for the webapp.",
            "Type": "HostHeader",
            "Params": {
                "HostName": "[parameter('AppHostMappingName')]"
            },
            "Skip": "[or(not(parameter('AppHostMappingName')),parameter('Update'))]"
        },
        "SetPermissions": {
            "Description": "Sets permissions for the app pool user.",
            "Type": "FilePermissions",
            "Params": {
                "Path": "[variable('App.Path')]",
                "Rights": [
                    {
                        "User": "[concat('IIS AppPool\\', parameter('AppName'))]",
                        "FileSystemRights": "FullControl",
                        "InheritanceFlags": [
                            "ContainerInherit",
                            "ObjectInherit"
                        ]
                    }
                ]
            },
            "Skip": "[parameter('Update')]"
        },
        "InstallWDP": {
            "Description": "Syncs the web deploy package with the webapp.",
            "Type": "WebDeploy",
            "Params": {
                "Verb": "Sync",
                "Arguments": {
                    "Source": {
                        "Package": "[resolvepath(variable('App.Package'))]"
                    },
                    "Dest": "Auto",
                    "enableRule": "DoNotDeleteRule",
                    "SetParam": [
                        {
                            "Name": "IIS Web Application Name",
                            "Value": "[parameter('AppName')]"
                        },
                        {
                            "Name": "Database Server Name",
                            "Value": "[parameter('SqlServerInstance')]"
                        },
                        {
                            "Name": "Database Admin User Name",
                            "Value": "[parameter('SqlServerAdminUser')]"
                        },
                        {
                            "Name": "Database Admin User Password",
                            "Value": "[parameter('SqlServerAdminPassword')]"
                        },
                        {
                            "Name": "Collection Database Server Name",
                            "Value": "[parameter('SqlServerInstance')]"
                        },
                        {
                            "Name": "Collection Shard Map Manager Database Name",
                            "Value": "[variable('Sql.Database.ShardMapManager.Name')]"
                        },
                        {
                            "Name": "Collection Shard 0 Database Name",
                            "Value": "[variable('Sql.Database.Shard0.Name')]"
                        },
                        {
                            "Name": "Collection Shard 1 Database Name",
                            "Value": "[variable('Sql.Database.Shard1.Name')]"
                        },
                        {
                            "Name": "Processing Pools Database Name",
                            "Value": "[variable('Sql.Database.ProcessingPools.Name')]"
                        },
                        {
                            "Name": "Marketing Automation Database Name",
                            "Value": "[variable('Sql.Database.MarketingAutomation.Name')]"
                        },
                        {
                            "Name": "Messaging Database Name",
                            "Value": "[variable('Sql.Database.Messaging.Name')]"
                        },
                        {
                            "Name": "Reference Data Database Name",
                            "Value": "[variable('Sql.Database.ReferenceData.Name')]"
                        },
                        {
                            "Name": "Collection Database Application User Name",
                            "Value": "[variable('Sql.Database.Collection.User')]"
                        },
                        {
                            "Name": "Collection Database Application User Password",
                            "Value": "[variable('Sql.Database.Collection.Password')]"
                        },
                        {
                            "Name": "Processing Pool Database Application User Name",
                            "Value": "[parameter('DatabaseProcessingPoolsUser')]"
                        },
                        {
                            "Name": "Processing Pool Database Application User Password",
                            "Value": "[variable('Sql.Database.ProcessingPools.Password')]"
                        },
                        {
                            "Name": "Marketing Automation Database Application User Name",
                            "Value": "[parameter('DatabaseMarketingAutomationUser')]"
                        },
                        {
                            "Name": "Marketing Automation Database Application User Password",
                            "Value": "[variable('Sql.Database.MarketingAutomation.Password')]"
                        },
                        {
                            "Name": "Messaging Database Application User Name",
                            "Value": "[parameter('DatabaseMessagingUser')]"
                        },
                        {
                            "Name": "Messaging Database Application User Password",
                            "Value": "[variable('Sql.Database.Messaging.Password')]"
                        },
                        {
                            "Name": "Reference Data Database Application User Name",
                            "Value": "[parameter('DatabaseReferenceDataUser')]"
                        },
                        {
                            "Name": "Reference Data Database Application User Password",
                            "Value": "[variable('Sql.Database.ReferenceData.Password')]"
                        },
                        {
                            "Name": "XConnect Server Configuration Environment",
                            "Value": "[parameter('AppEnvironment')]"
                        },
                        {
                            "Name": "XConnect Server Certificate Validation Thumbprint",
                            "Value": "[variable('Certificate.XConnect.Thumbprint')]"
                        },
                        {
                            "Name": "XConnect Server Log Level",
                            "Value": "[parameter('AppLogLevel')]"
                        }
                    ],
                    "Skip": [
                        {
                            "ObjectName": "[variable('Skip.dbDacFx')]"
                        },
                        {
                            "ObjectName": "[variable('Skip.dbFullSql')]"
                        }
                    ]
                }
            }
        },
        "SetLicense": {
            "Description": "Copies the license file to the instance data folder.",
            "Type": "Copy",
            "Params": {
                "Source": "[resolvepath(parameter('AppsLicenseFile'))]",
                "Destination": "[variable('App.DataFolder')]"
            },
            "Skip": "[parameter('Update')]"
        },
        "CreateBindingsWithDevelopmentThumbprint": {
            "Description": "Creates a new thumbprint with a custom CA.",
            "Type": "AddWebFeatureSSL",
            "Params": {
                "SiteName": "[parameter('AppName')]",
                "HostName": "[parameter('AppDnsName')]",
                "OutputDirectory": "[variable('App.DataFolder')]"
            },
            "Skip": "[or(parameter('AppCertificate'),parameter('Update'))]"
        },
        "CleanShards": {
            "Description": "Drop existing shards.",
            "Type": "Command",
            "Params": {
                "Path": "[variable('Sharding.Tool.Path')]",
                "Arguments": [
                    "/operation",
                    "drop",
                    "/connectionstring",
                    "[variable('Sharding.DB.Connection')]",
                    "/shardMapManagerDatabaseName",
                    "[variable('Sql.Database.ShardMapManager.Name')]"
                ],
                "TaskName": "ShardingTool - Clean"
            },
            "Skip": "[or(parameter('AppSkipDatabaseInstallation'),parameter('Update'))]"
        },
        "CreateShards": {
            "Description": "Create new shards.",
            "Type": "Command",
            "Params": {
                "Path": "[variable('Sharding.Tool.Path')]",
                "Arguments": [
                    "/operation",
                    "create",
                    "/connectionstring",
                    "[variable('Sharding.DB.Connection')]",
                    "/shardMapManagerDatabaseName",
                    "[variable('Sql.Database.ShardMapManager.Name')]",
                    "/dbedition",
                    "[variable('Sharding.Edition')]",
                    "/shardnumber",
                    2,
                    "/shardnameprefix",
                    "[variable('Sql.Database.Sharding.Prefix')]",
                    "/shardnamesuffix",
                    "\"\"",
                    "/dacpac",
                    "[variable('Sharding.DacPac.Path')]"
                ],
                "TaskName": "ShardingTool - Create"
            },
            "Skip": "[or(parameter('AppSkipDatabaseInstallation'),parameter('Update'))]"
        },
        "CreateShardApplicationDatabaseServerLoginInvokeSqlCmd": {
            "Description": "Create Collection Shard Database Server Login.",
            "Type": "InvokeSqlcmd",
            "Params": {
                "ServerInstance": "[parameter('SqlServerInstance')]",
                "Credential": "[variable('Sql.Server.Credential')]",
                "InputFile": "[variable('Sharding.SqlCmd.Path.CreateShardApplicationDatabaseServerLogin')]",
                "Variable": [
                    "[concat('UserName=',variable('Sql.Database.Collection.User'))]",
                    "[concat('Password=',variable('Sql.Database.Collection.Password'))]"
                ]
            },
            "Skip": "[or(parameter('AppSkipDatabaseInstallation'),parameter('Update'))]"
        },
        "CreateShardManagerApplicationDatabaseUserInvokeSqlCmd": {
            "Description": "Create Collection Shard Manager Database User.",
            "Type": "InvokeSqlcmd",
            "Params": {
                "ServerInstance": "[parameter('SqlServerInstance')]",
                "Credential": "[variable('Sql.Server.Credential')]",
                "Database": "[variable('Sql.Database.ShardMapManager.Name')]",
                "InputFile": "[variable('Sharding.SqlCmd.Path.CreateShardManagerApplicationDatabaseUser')]",
                "Variable": [
                    "[concat('UserName=',variable('Sql.Database.Collection.User'))]",
                    "[concat('Password=',variable('Sql.Database.Collection.Password'))]"
                ]
            },
            "Skip": "[or(parameter('AppSkipDatabaseInstallation'),parameter('Update'))]"
        },
        "CreateShard0ApplicationDatabaseUserInvokeSqlCmd": {
            "Description": "Create Collection Shard 0 Database User.",
            "Type": "InvokeSqlcmd",
            "Params": {
                "ServerInstance": "[parameter('SqlServerInstance')]",
                "Credential": "[variable('Sql.Server.Credential')]",
                "Database": "[variable('Sql.Database.Shard0.Name')]",
                "InputFile": "[variable('Sharding.SqlCmd.Path.CreateShardApplicationDatabaseUser')]",
                "Variable": [
                    "[concat('UserName=',variable('Sql.Database.Collection.User'))]",
                    "[concat('Password=',variable('Sql.Database.Collection.Password'))]"
                ]
            },
            "Skip": "[or(parameter('AppSkipDatabaseInstallation'),parameter('Update'))]"
        },
        "CreateShard1ApplicationDatabaseUserInvokeSqlCmd": {
            "Description": "Create Collection Shard 1 Database User.",
            "Type": "InvokeSqlcmd",
            "Params": {
                "ServerInstance": "[parameter('SqlServerInstance')]",
                "Credential": "[variable('Sql.Server.Credential')]",
                "Database": "[variable('Sql.Database.Shard1.Name')]",
                "InputFile": "[variable('Sharding.SqlCmd.Path.CreateShardApplicationDatabaseUser')]",
                "Variable": [
                    "[concat('UserName=',variable('Sql.Database.Collection.User'))]",
                    "[concat('Password=',variable('Sql.Database.Collection.Password'))]"
                ]
            },
            "Skip": "[or(parameter('AppSkipDatabaseInstallation'),parameter('Update'))]"
        },
        "StartAppPool": {
            "Description": "Starts the app pool.",
            "Type": "ManageAppPool",
            "Params": {
                "Name": "[parameter('AppName')]",
                "Action": "Start"
            }
        },
        "StartWebsite": {
            "Description": "Starts the webapp.",
            "Type": "ManageWebsite",
            "Params": {
                "Name": "[parameter('AppName')]",
                "Action": "Start"
            }
        }
    },
    "UninstallTasks": {
        "StopWebsite": {
            "Description": "Stops the website if it is running.",
            "Type": "ManageWebsite",
            "Params": {
                "Name": "[parameter('AppName')]",
                "Action": "Stop",
                "ErrorAction": "SilentlyContinue"
            }
        },
        "StopAppPool": {
            "Description": "Stops the app pool if it is running.",
            "Type": "ManageAppPool",
            "Params": {
                "Name": "[parameter('AppName')]",
                "Action": "Stop",
                "ErrorAction": "SilentlyContinue"
            }
        },
        "RemoveWebsite": {
            "Description": "Removes the IIS webapp.",
            "Type": "RemoveWebsite",
            "Params": {
                "Name": "[parameter('AppName')]"
            }
        },
        "RemoveAppPool": {
            "Description": "Removes the IIS application pool.",
            "Type": "RemoveAppPool",
            "Params": {
                "Name": "[parameter('AppName')]"
            }
        },
        "RemoveContent": {
            "Description": "Removes website content.",
            "Type": "RemoveItem",
            "Params": {
                "Path": "[variable('App.Path')]",
                "Recurse": true,
                "ErrorAction": "SilentlyContinue"
            }
        },
        "RemoveHostHeader": {
            "Description": "Removes the website host name.",
            "Type": "HostHeader",
            "Params": {
                "HostName": "[parameter('AppName')]",
                "Action": "Remove"
            }
        },
        "RemoveDatabases": {
            "Description": "Removes the databases.",
            "Type": "RemoveSQLDatabase",
            "Params": {
                "ServerName": "[parameter('SqlServerInstance')]",
                "Username": "[parameter('SqlServerAdminUser')]",
                "Password": "[variable('Sql.Server.Password.Secure')]",
                "DatabaseName": [
                    "[variable('Sql.Database.ShardMapManager.Name')]",
                    "[variable('Sql.Database.Shard0.Name')]",
                    "[variable('Sql.Database.Shard1.Name')]",
                    "[variable('Sql.Database.ProcessingPools.Name')]",
                    "[variable('Sql.Database.MarketingAutomation.Name')]",
                    "[variable('Sql.Database.Messaging.Name')]"
                ]
            }
        },
        "RemoveLogin": {
            "Description": "Removes the DatabasecollectionUser login from the database server.",
            "Type": "RemoveSQLLogin",
            "Params": {
                "LoginName": "[variable('Sql.Database.Collection.User')]",
                "ServerInstance": "[parameter('SqlServerInstance')]",
                "Credential": "[variable('Sql.Server.Credential')]",
                "Force": true,
                "ErrorAction": "SilentlyContinue"
            }
        }
    }
}
