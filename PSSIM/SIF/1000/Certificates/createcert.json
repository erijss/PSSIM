{
    "Parameters": {
        "CertificateName": {
            "Type": "String",
            "Description": "The name of the certificate to be created.",
            "DefaultValue": ""
        },
        "CertificatePath": {
            "Type": "String",
            "Description": "The physical path on disk where certificates will be stored.",
            "DefaultValue": "C:\\Certificates"
        },
        "CertificateRootName": {
            "Type": "String",
            "Description": "The file name of the root certificate to be created.",
            "DefaultValue": "SitecoreRootCert"
        },
        "CertificatePassword": {
            "Type": "String",
            "Description": "Password to export certificates with.",
            "DefaultValue": "SIF-Default"
        },
        "Update": {
            "Type": "bool",
            "Description": "The parameter for the installing delta WDP packages.",
            "DefaultValue": false
        }
    },
    "Variables": {
        "Certificate.Root.DnsName": "[concat('DO_NOT_TRUST_', parameter('CertificateRootName'))]",
        "Certificate.Root.Store": "Cert:\\LocalMachine\\Root",
        "Certificate.Client.Store": "Cert:\\LocalMachine\\My",
        "Certificate.Password.Export": "[if(variable('Certificate.Password.Custom.Test'),variable('Certificate.Password.Random.Secure'),variable('Certificate.Password.Custom.Secure'))]",
        "Certificate.Password.Custom.Test": "[equal(parameter('CertificatePassword'),'SIF-Default')]",
        "Certificate.Password.Random.Secure": "[ConvertToSecureString(String:variable('Certificate.Password.Random'),AsPlainText:true,Force:true)]",
        "Certificate.Password.Random": "[RandomString(Length:20,EnforceComplexity:True)]",
        "Certificate.Password.Custom.Secure": "[ConvertToSecureString(String:parameter('CertificatePassword'),AsPlainText:true,Force:true)]"
    },
    "Register": {
        "Tasks": {
            "WriteInformation": "Write-Information"
        },
        "ConfigFunction": {
            "ConvertToSecureString": "ConvertTo-SecureString"
        }
    },
    "Tasks": {
        "CreatePaths": {
            "Description": "Create the physical disk path.",
            "Type": "EnsurePath",
            "Params": {
                "Exists": [
                    "[parameter('CertificatePath')]"
                ]
            },
            "Skip": "[parameter('Update')]"
        },
        "DisplayPassword": {
            "Description": "Print password if the user hasn't supplied their own.",
            "Type": "WriteInformation",
            "Params": {
                "Messagedata": "[concat('Certificate Password: ',variable('Certificate.Password.Random'))]",
                "InformationAction": "Continue"
            },
            "Skip": "[or(not(variable('Certificate.Password.Custom.Test')),parameter('Update'))]"
        },
        "CreateRootCert": {
            "Description": "Create the root certificate.",
            "Type": "NewRootCertificate",
            "Params": {
                "Path": "[parameter('CertificatePath')]",
                "Name": "[parameter('CertificateRootName')]",
                "DnsName": [
                    "[variable('Certificate.Root.DnsName')]",
                    "127.0.0.1"
                ],
                "IncludePrivateKey": true,
                "Password": "[variable('Certificate.Password.Export')]"
            },
            "Skip": "[parameter('Update')]"
        },
        "CreateSignedCert": {
            "Description": "Create a certificate signed by the root authority.",
            "Type": "NewSignedCertificate",
            "Params": {
                "Signer": "[GetCertificate(variable('Certificate.Root.DnsName'), variable('Certificate.Root.Store'))]",
                "Path": "[parameter('CertificatePath')]",
                "CertStoreLocation": "[variable('Certificate.Client.Store')]",
                "Name": "[parameter('CertificateName')]",
                "DnsName": [
                    "[parameter('CertificateName')]",
                    "127.0.0.1"
                ],
                "IncludePrivateKey": true,
                "Password": "[variable('Certificate.Password.Export')]"
            },
            "Skip": "[parameter('Update')]"
        }
    }
}
